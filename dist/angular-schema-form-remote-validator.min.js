angular.module("schemaForm").run(["$templateCache",function(r){r.put("directives/decorators/bootstrap/remote-validator/remote-validator.html",'<div class="form-group {{form.htmlClass}}" ng-class="{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess(), \'has-feedback\': form.feedback !== false }"><label class="control-label" ng-show="showTitle()">{{form.title}}</label><div ng-class="{\'input-group\': (form.fieldAddonLeft || form.fieldAddonRight)}"><span ng-if="form.fieldAddonLeft" class="input-group-addon" ng-bind-html="form.fieldAddonLeft"></span> <input aria-describedby="{{form.key.slice(-1)[0] + \'Status\'}}" class="form-control {{form.fieldHtmlClass}}" format="form.format" remote-validator="{{form.url}}" remote-validator-key="{{form.validate || form.key.slice(-1)[0]}}" id="{{form.key.slice(-1)[0]}}" name="{{form.key.slice(-1)[0]}}" ng-disabled="form.readonly" ng-model-options="form.ngModelOptions" ng-model="$$value$$" ng-show="form.key" placeholder="{{form.placeholder}}" schema-validate="form" sf-changed="form" style="background-color: white" type="text"> <span ng-if="form.fieldAddonRight" class="input-group-addon" ng-bind-html="form.fieldAddonRight"></span></div><span ng-if="form.feedback !== false" class="form-control-feedback" ng-class="evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }" aria-hidden="true"></span> <span ng-if="hasError() || hasSuccess()" id="{{form.key.slice(-1)[0] + \'Status\'}}" class="sr-only">{{ hasSuccess() ? \'(success)\' : \'(error)\' }}</span> <span class="help-block">{{ (hasError() && errorMessage(schemaError())) || form.description}}</span></div>')}]),function(){angular.module("schemaForm").config(["schemaFormProvider","schemaFormDecoratorsProvider","sfPathProvider",function(r,e,a){var o;o=function(e,o,t){var s;return"remote-validator"===o.type||"string"===o.type&&"remote-validator"===o.format?(s=r.stdFormObj(e,o,t),s.key=t.path,s.type="remote-validator",t.lookup[a.stringify(t.path)]=s,s):void 0},r.defaults.string.unshift(o),e.addMapping("bootstrapDecorator","remote-validator","directives/decorators/bootstrap/remote-validator/remote-validator.html"),e.createDirective("remote-validator","directives/decorators/bootstrap/remote-validator/remote-validator.html")}]),angular.module("schemaForm").directive("remoteValidator",["$q","$http","$log",function(r,e,a){var o;return o={restrict:"A",require:"ngModel",link:function(o,t,s,l){var i,d;d=s.remoteValidator,i=s.remoteValidatorKey,o.errorMessage=function(){return o.errMsg||null},l.$asyncValidators[i]=function(t){var s;return a.info(t),s={},s[i]=t,e.post(d,s).then(function(e){var a;return e.data.valid?(l.$modelValue&&e.data&&e.data.what&&e.data["with"]&&(l.$modelValue=l.$modelValue.replace(e.data.what,e.data["with"]),o.$broadcast("schemaFormRedraw")),r.resolve()):(a=o,o.form.validationMessage={},o.errMsg=e.data.msg,r.reject(e.data.msg))})}}}}])}.call(this);